version: '3'

includes:
  home: 
    taskfile: ./home
    internal: true
  gnome: 
    taskfile: ./gnome
    internal: true

env: 
  ROOT_DIR: '{{ .TASKFILE_DIR }}'

tasks:
  _shared:
    internal: true  
    desc: Internal Task for declaring shared block
    vars: &shared_vars
      DISTRO_ID: 
        sh: cat /etc/*-release | grep -e "^NAME=" | sed 's:^NAME=::' | sed 's:"::g'
      DEVICE_TYPE: 
        sh: |
          if [[ -n '{{ .DEVICE_TYPE}}' ]]; then 
            echo {{ .DEVICE_TYPE }}
          elif [[ -d /usr/share/xsessions ]] && [[ -n "$(ls -A /usr/share/xsessions/)" ]]; then
            echo PC
          else
            echo SERVER
          fi
      IS_SUDOER:
        sh: |
          if [[ -n '{{ .IS_SUDOER }}' ]]; then 
            echo {{ .IS_SUDOER }}
          elif [[ -n $(groups | grep --only-matching sudo) ]]; then 
            echo TRUE
          else 
            echo FALSE
          fi
      HAS_NVIDIA_CARD:
        sh: |
          if [[ -n '{{ .HAS_NVIDIA_CARD }}' ]]; then
            echo {{ .HAS_NVIDIA_CARD }}
          elif [[ -n $(lshw -C display | grep NVIDIA) ]] > /dev/null 2>&1; then
            echo TRUE
          else
            echo FALSE
          fi

    preconditions: &shared_preconditions
      # Validate `DEVICE_TYPE`
      - sh: "[[ '{{ .DEVICE_TYPE }}' == 'PC' || '{{ .DEVICE_TYPE }}' == 'SERVER' ]]"
        msg: "'DEVICE_TYPE' must be 'PC' or 'SERVER', not '{{ .DEVICE_TYPE }}'"
      
      # Validate `DISTRO_ID`
      - sh: "[[ '{{ .DISTRO_ID }}' == 'Ubuntu' ]]"
        msg: "Not supported for '{{ .DISTRO_ID }}'"

      # Validate `IS_SUDOER`
      - sh: "[[ '{{ .IS_SUDOER }}' == 'TRUE' || '{{ .IS_SUDOER }}' == 'FALSE' ]]"
        msg: "'IS_SUDOER' must be 'TRUE' or 'FALSE', not '{{ .IS_SUDOER }}'"
      - sh: "[[ '{{ .IS_SUDOER }}' == 'TRUE' ]]"
        msg: "Not supported for 'IS_SUDOER={{ .IS_SUDOER }}'"
      
      # Validate `HAS_NVIDIA_CARD`
      - sh: "[[ '{{ .HAS_NVIDIA_CARD }}' == 'TRUE' || '{{ .HAS_NVIDIA_CARD }}' == 'FALSE' ]]"
        msg: "'HAS_NVIDIA_CARD' must be 'TRUE' or 'FALSE', not '{{ .HAS_NVIDIA_CARD }}'"
  init: 
    desc: Setup for new machine
    dir: '{{ .TASKFILE_DIR }}'
    vars: *shared_vars
    preconditions: *shared_preconditions
    prompt: |
      Install with: 
        + DEVICE_TYPE: '{{ .DEVICE_TYPE }}'
        + DISTRO_ID: '{{ .DISTRO_ID }}'
        + IS_SUDOER:  '{{ .IS_SUDOER }}'
        + HAS_NVIDIA_CARD: '{{ .HAS_NVIDIA_CARD }}'
    cmds: 
      # Install base packages
      - cmd: |
          sudo add-apt-repository -ny universe
          sudo apt update -qq && sudo apt upgrade -qqy
          sudo apt-get install -qqy \
            build-essential procps file screenfetch \
            curl wget git vim xclip bash-completion \
            fio pwgen python3-pip
          sudo apt-get install -qqy golang-go snapd
      # Init Home for config files
      - task: home:init&verify
      # ssh-key
      - cmd: |
          TYPE=rsa
          if ! [[ -f ~/.ssh/$TYPE ]]; then ssh-keygen -t $TYPE -C "kienlt" -N '' -f ~/.ssh/$TYPE; fi
      # brew
      - cmd: |
          if [ -d ~/.local/lib/homebrew ]; then rm -rf ~/.local/lib/homebrew; fi
          mkdir -p ~/.local/lib/homebrew
          curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C ~/.local/lib/homebrew

          if [ -f ~/.local/bin/brew ]; then rm -rf ~/.local/bin/brew; fi
          ln -sf ~/.local/lib/homebrew/bin/brew ~/.local/bin/brew
      # Install GUI packages
      - cmd: |
          if [[ '{{ .DEVICE_TYPE }}' == 'PC' && -n '$(ls -A /usr/share/xsessions/)' ]]; then
            for package in $( ls ./packages/{{ .DISTRO_ID }}/gui ); do
              bash ./packages/{{ .DISTRO_ID }}/gui/${package} 
            done
          fi
      # Install sudo packages
      - cmd: |
          for package in $( ls -p ./packages/{{ .DISTRO_ID }}/sudo | grep -v "/"); do 
            bash ./packages/{{ .DISTRO_ID }}/sudo/${package} 
          done
      - cmd: |
          if [[ '{{ .HAS_NVIDIA_CARD }}' == 'TRUE' ]]; then
            # nvidia-driver
            sudo apt install -qqy nvidia-utils-535 nvidia-driver-535
            # nvidia-container-toolkit
            curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
              && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
                sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
                sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
            sudo sed -i -e '/experimental/ s/^#//g' /etc/apt/sources.list.d/nvidia-container-toolkit.list
            sudo apt-get update
            sudo apt-get install -qqy nvidia-container-toolkit nvidia-cuda-toolkit
            sudo nvidia-ctk runtime configure --runtime=docker
            sudo systemctl restart docker
          fi
      # Install shared packages
      - cmd: |
          for package in $( ls -p ./packages/{{ .DISTRO_ID }}/shared | grep -v "/"); do 
            bash ./packages/{{ .DISTRO_ID }}/shared/${package} 
          done
      # Install personal packages
      - cmd: |
          for package in $( ls -p ./packages/{{ .DISTRO_ID }}/personal | grep -v "/"); do 
            bash ./packages/{{ .DISTRO_ID }}/personal/${package} 
          done
      - task: setup
      - sudo reboot
  setup:
    desc: Setup working env for user. 
    dir: '{{ .TASKFILE_DIR }}'
    vars: *shared_vars
    preconditions: *shared_preconditions
    prompt: |
      Setting with: 
        + DEVICE_TYPE: '{{ .DEVICE_TYPE }}'
        + DISTRO_ID: '{{ .DISTRO_ID }}'
        + IS_SUDOER:  '{{ .IS_SUDOER }}'
    cmds: 
      - cmd: |
          if [[ '{{ .DEVICE_TYPE }}' == 'PC' ]] && [[ -n '$(ls -A /usr/share/xsessions/)' ]]; then
            task -d={{ .TASKFILE_DIR }}/gnome setup IS_SUDOER={{ .IS_SUDOER }} DEVICE_TYPE={{ .DEVICE_TYPE }}
          fi
      - task: home:init&verify
